{"version":3,"sources":["src/modules/draw.js","src/modules/utils.js","src/app.js"],"names":["getMousePosOnCanva","e","canva","rect","getBoundingClientRect","x","clientX","left","y","clientY","top","draw","event","bool","ctx","lineTo","stroke","beginPath","moveTo","d","document","w","window","canvas","querySelector","lineWidth_input","color_input","width","innerWidth","height","innerHeight","getContext","strokeStyle","value","lineCap","lineWidth","is_drawing","clear_drawing","clearRect","download_drawing","el","image","toDataURL","href","addEventListener","target","classList","contains"],"mappings":";AAeC,aAfD,SAASA,EAAmBC,EAAGC,GACvBC,IAAAA,EAAOD,EAAME,wBACZ,MAAA,CACLC,EAAGJ,EAAEK,QAAUH,EAAKI,KACpBC,EAAGP,EAAEQ,QAAUN,EAAKO,KAIT,SAASC,EAAKC,EAAOC,EAAMX,EAAOY,GAC3CD,IAEJC,EAAIC,OAAOf,EAAmBY,EAAOV,GAAOG,EAAGL,EAAmBY,EAAOV,GAAOM,GAChFM,EAAIE,SACJF,EAAIG,YACJH,EAAII,OAAOlB,EAAmBY,EAAOV,GAAOG,EAAGL,EAAmBY,EAAOV,GAAOM,IACjF,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,QAAA;;ACdM,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,EAAA,QAAA,OAAA,EADA,IAAMW,EAAIC,SACV,QAAA,EAAA,EAAA,IAAMC,EAAIC,OAAV,QAAA,EAAA;;;;ACoDP,aArDA,IAAA,EAAA,EAAA,QAAA,mBACA,EAAA,QAAA,mBAoDA,SAAA,EAAA,GAAA,OAAA,GAAA,EAAA,WAAA,EAAA,CAAA,QAAA,GAnDA,QAAA,qBAIA,IAAMC,EAASJ,EAAEK,EAAAA,cAAc,gBACzBC,EAAkBL,SAASI,cAAc,2BACzCE,EAAcN,SAASI,cAAc,6BAG3CD,EAAOI,MAAQ,GAAKN,EAAEO,EAAAA,WACtBL,EAAOM,OAAS,GAAKR,EAAES,EAAAA,YACvB,IAAMhB,EAAMS,EAAOQ,WAAW,MAC9BjB,EAAIkB,YAAcN,EAAYO,MAC9BnB,EAAIoB,QAAU,QACdpB,EAAIqB,UAAYV,EAAgBQ,MAChC,IAAIG,GAAa,EA0BjB,SAASC,IACPvB,EAAIwB,UAAU,EAAG,EAAGf,EAAOI,MAAOJ,EAAOM,QAK3C,SAASU,EAAiBC,GAClBC,IAAAA,EAAQlB,EAAOmB,UAAU,aAC/BF,EAAGG,KAAOF,EA9BZlB,EAAOqB,iBAAiB,YAAa,WAAMR,OAAAA,GAAa,IACxDb,EAAOqB,iBAAiB,UAAW,WACjCR,GAAa,EACbtB,EAAIG,cAENI,EAAEuB,EAAAA,iBAAiB,YAAa,SAAA3C,GAC3BA,EAAE4C,OAAOC,UAAUC,SAAS,WACxB9C,EAAAA,EAAAA,SAAAA,EAAGmC,EAAYb,EAAQT,GAE5BsB,GAAa,IAKjBX,EAAgBmB,iBAAiB,QAAS,SAAA3C,GACxCa,EAAIqB,UAAYlC,EAAE4C,OAAOZ,QAE3BP,EAAYkB,iBAAiB,QAAS,SAAA3C,GACpCa,EAAIkB,YAAc/B,EAAE4C,OAAOZ,QAO7Bd,EAAEK,EAAAA,cAAc,kBAAkBoB,iBAAiB,QAASP,GAO5DlB,EAAEK,EAAAA,cAAc,iBAAiBoB,iBAAiB,QAAS,SAAA3C,GAAKsC,OAAAA,EAAiBtC,EAAE4C","file":"app.effb2f47.js","sourceRoot":"..","sourcesContent":["function getMousePosOnCanva(e, canva) {\r\n  const rect = canva.getBoundingClientRect()\r\n  return {\r\n    x: e.clientX - rect.left,\r\n    y: e.clientY - rect.top\r\n  }\r\n}\r\n\r\nexport default function draw(event, bool, canva, ctx) {\r\n  if(!bool) return\r\n\r\n  ctx.lineTo(getMousePosOnCanva(event, canva).x, getMousePosOnCanva(event, canva).y)\r\n  ctx.stroke()\r\n  ctx.beginPath()\r\n  ctx.moveTo(getMousePosOnCanva(event, canva).x, getMousePosOnCanva(event, canva).y)\r\n}","export const d = document\r\nexport const w = window","import draw from \"./modules/draw\"\r\nimport { d, w } from \"./modules/utils\"\r\nimport \"./styles/app.scss\"\r\n\r\n\r\n// DOM\r\nconst canvas = d.querySelector(\"#draw_canvas\")\r\nconst lineWidth_input = document.querySelector(\".option.linewidth input\")\r\nconst color_input = document.querySelector(\".option.strokeStyle input\")\r\n\r\n// Canvas options\r\ncanvas.width = .7 * w.innerWidth\r\ncanvas.height = .8 * w.innerHeight\r\nconst ctx = canvas.getContext(\"2d\")\r\nctx.strokeStyle = color_input.value\r\nctx.lineCap = \"round\"\r\nctx.lineWidth = lineWidth_input.value\r\nlet is_drawing = false\r\n\r\n\r\n// Draw events\r\ncanvas.addEventListener(\"mousedown\", () => is_drawing = true)\r\ncanvas.addEventListener(\"mouseup\", () => {\r\n  is_drawing = false\r\n  ctx.beginPath()\r\n})\r\nw.addEventListener(\"mousemove\", e => {\r\n  if(e.target.classList.contains(\"canvas\")){\r\n    draw(e, is_drawing, canvas, ctx)\r\n  } else {\r\n    is_drawing = false\r\n  }\r\n})\r\n\r\n// Options event\r\nlineWidth_input.addEventListener(\"input\", e => {\r\n  ctx.lineWidth = e.target.value\r\n})\r\ncolor_input.addEventListener(\"input\", e => {\r\n  ctx.strokeStyle = e.target.value\r\n})\r\n\r\n// Clear drawing\r\nfunction clear_drawing() {\r\n  ctx.clearRect(0, 0, canvas.width, canvas.height)\r\n}\r\nd.querySelector(\"#clear_drawing\").addEventListener(\"click\", clear_drawing)\r\n\r\n// Dowload file\r\nfunction download_drawing(el) {\r\n  const image = canvas.toDataURL(\"image/jpg\")\r\n  el.href = image\r\n}\r\nd.querySelector(\"#save_drawing\").addEventListener(\"click\", e => download_drawing(e.target))"]}